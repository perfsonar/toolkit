Index: b/init_scripts/perfsonar-configure_nic_parameters
===================================================================
--- a/init_scripts/perfsonar-configure_nic_parameters	2025-06-30 12:26:31.048571037 -0400
+++ b/init_scripts/perfsonar-configure_nic_parameters	2025-06-30 12:26:31.375362901 -0400
@@ -9,7 +9,7 @@
 ### END INIT INFO
 
 # Source function library.
-. /etc/init.d/functions
+. /lib/lsb/init-functions
 
 # always set these on perfsonar hosts
 DISABLE_TCP_OFFLOAD=1
@@ -50,34 +50,34 @@
         RETVAL=$?
         if [ $RETVAL -eq 0 ]; then
             # apply multi-ethtool settings
-            echo -n $"disabling interrupt coalescing for interface $interface: "
+            log_action_begin_msg "Disabling interrupt coalescing for interface $interface"
             IC_OFF $interface
             if [ $? -eq 0 ]; then
-                success; echo
+                log_action_end_msg $?
             else
                 # coalescing support is driver dependent so ignore errors here
-                failure; echo
+                log_action_end_msg $?;
             fi
         fi
     fi
 
     if [ $DISABLE_TCP_OFFLOAD ]; then
-        echo -n $"disabling TCP offload for interface $interface: "
+        log_action_begin_msg "Disabling TCP offload for interface $interface"
         TSO_OFF $interface
         if [ $? -eq 0 ]; then
-            success; echo
+            log_action_end_msg $?
         else
-            failure; echo; ret=1
+            log_action_end_msg $?; ret=1
         fi
     fi
 
     if [ $TXQUEUELEN -ne 0 ]; then
-        echo -n $"Setting txqueuelen for $interface to $TXQUEUELEN: "
+        log_action_begin_msg "Setting txqueuelen for $interface to $TXQUEUELEN"
         TXQUEUELEN_SET $interface $TXQUEUELEN
         if [ $? -eq 0 ]; then
-            success; echo
+            log_action_end_msg $?
         else
-            failure; echo; ret=1
+            log_action_end_msg $?; ret=1
         fi
     fi
 done
@@ -125,7 +125,6 @@
 
 case "$1" in
     start|restart|force-reload)
-        [ -f "$VAR_SUBSYS_TCP_TUNING" ] && exit 0
         start
         RETVAL=$?
         ;;
Index: b/scripts/system_environment/disable_unwanted_services
===================================================================
--- a/scripts/system_environment/disable_unwanted_services	2025-06-30 12:26:29.496897834 -0400
+++ b/scripts/system_environment/disable_unwanted_services	2025-06-30 12:26:31.375984861 -0400
@@ -6,9 +6,9 @@
 
 function disable_service() {
     if type systemctl &>/dev/null; then
-        systemctl disable $1 2>/dev/null
+        systemctl disable $1 &>/dev/null
     else
-        /sbin/chkconfig $1 off 2>/dev/null
+        /usr/sbin/update-rc.d $1 disable &>/dev/null
     fi
 }
 
Index: b/scripts/system_environment/testpoint/enable_auto_updates
===================================================================
--- a/scripts/system_environment/testpoint/enable_auto_updates	2025-06-30 12:26:29.497507504 -0400
+++ b/scripts/system_environment/testpoint/enable_auto_updates	2025-06-30 12:26:31.376553947 -0400
@@ -11,22 +11,19 @@
 MAJOR=${PREV_VERSION%%\.*}
 REST=${PREV_VERSION/${MAJOR}\.}
 MINOR=${REST%%\.*}
+CONFIG=/etc/apt/apt.conf.d/60unattended-upgrades-perfsonar
 
 # Need to activate if new install or if they were previously running 3.3.2 or older
-if [ "$1" == "new" ]; then
+if [ "$1" == "new" ] || ! grep -qs Download-Upgradeable-Packages $CONFIG; then
     echo "Enabling Automatic Updates"
-    # Make sure download_updates and apply_updates are on in centos 7
-    if [ -f "/etc/yum/yum-cron.conf" ]; then
-        sed -i "s/download_updates = .*/download_updates = yes/g" /etc/yum/yum-cron.conf
-        sed -i "s/apply_updates = .*/apply_updates = yes/g" /etc/yum/yum-cron.conf
-        systemctl enable --now yum-cron
-    elif [ -f "/etc/dnf/automatic.conf" ]; then
-        sed -i "s/download_updates = .*/download_updates = yes/g" /etc/dnf/automatic.conf
-        sed -i "s/apply_updates = .*/apply_updates = yes/g" /etc/dnf/automatic.conf
-        systemctl enable --now dnf-automatic.timer
-    else
-        echo "Unable to find a recognized automatic updater."
-    fi
     
+    cat <<EOF >$CONFIG
+APT::Periodic::Update-Package-Lists "1";
+APT::Periodic::Download-Upgradeable-Packages "1";
+APT::Periodic::Unattended-Upgrade "1";
+APT::Periodic::AutocleanInterval "31";
+Unattended-Upgrade::Origins-Pattern:: "origin=perfSONAR";
+EOF
+
 fi
 
